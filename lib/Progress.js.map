{"version":3,"sources":["../src/Progress.js"],"names":["Progress","easing","BezierEasing","props","value","nextProps","progress","progressColor","sx","x","sy","y","px","py","prog","BezierComponent"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;;;;0LACnBC,M,GAASC,2DAAgB,MAAKC,KAAL,CAAWC,KAA3B,E;;;;;0CAEaC,S,EAAW;AAC/B,oIAAgCA,SAAhC,GAA4C,OAAO,IAAP;AADb,mBAEY,KAAKF,KAFjB;AAAA,UAEvBC,KAFuB,UAEvBA,KAFuB;AAAA,UAEhBE,QAFgB,UAEhBA,QAFgB;AAAA,UAENC,aAFM,UAENA,aAFM;;AAG/B,aACEF,UAAUC,QAAV,KAAuBA,QAAvB,IACAD,UAAUE,aAAV,KAA4BA,aAD5B,IAEAF,UAAUD,KAAV,KAAoBA,KAHtB;AAKD;;;wCAEmBD,K,EAAO;AACzB,UAAI,KAAKA,KAAL,CAAWC,KAAX,KAAqBD,MAAMC,KAA/B,EAAsC;AACpC,aAAKH,MAAL,GAAcC,2DAAgBC,MAAMC,KAAtB,EAAd;AACD;AACF;;;6BAEQ;AAAA,oBAC6B,KAAKD,KADlC;AAAA,UACCG,QADD,WACCA,QADD;AAAA,UACWC,aADX,WACWA,aADX;;AAEP,UAAI,CAACD,QAAL,EAAe,OAAO,2CAAP;AACf,UAAME,KAAK,KAAKC,CAAL,CAAO,CAAP,CAAX;AACA,UAAMC,KAAK,KAAKC,CAAL,CAAO,CAAP,CAAX;AACA,UAAMC,KAAK,KAAKH,CAAL,CAAOH,QAAP,CAAX;AACA,UAAMO,KAAK,KAAKF,CAAL,CAAO,KAAKV,MAAL,GAAc,KAAKA,MAAL,CAAYK,QAAZ,CAAd,GAAsC,CAA7C,CAAX;AACA,UAAMQ,aAAWF,EAAX,SAAiBF,EAAjB,UAAwBE,EAAxB,SAA8BC,EAA9B,UAAqCL,EAArC,SAA2CK,EAAjD;AACA,aACE,wCAAM,MAAK,MAAX,EAAkB,aAAY,KAA9B,EAAoC,QAAQN,aAA5C,EAA2D,GAAGO,IAA9D,GADF;AAGD;;;;EA9BmCC,yB;;kBAAjBf,Q","file":"Progress.js","sourcesContent":["import React from \"react\";\r\nimport BezierEasing from \"bezier-easing\";\r\nimport BezierComponent from \"./BezierComponent\";\r\n\r\nexport default class Progress extends BezierComponent {\r\n  easing = BezierEasing(...this.props.value);\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    if (super.shouldComponentUpdate(nextProps)) return true;\r\n    const { value, progress, progressColor } = this.props;\r\n    return (\r\n      nextProps.progress !== progress ||\r\n      nextProps.progressColor !== progressColor ||\r\n      nextProps.value !== value\r\n    );\r\n  }\r\n\r\n  componentWillUpdate(props) {\r\n    if (this.props.value !== props.value) {\r\n      this.easing = BezierEasing(...props.value);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { progress, progressColor } = this.props;\r\n    if (!progress) return <path />;\r\n    const sx = this.x(0);\r\n    const sy = this.y(0);\r\n    const px = this.x(progress);\r\n    const py = this.y(this.easing ? this.easing(progress) : 0);\r\n    const prog = `M${px},${sy} L${px},${py} L${sx},${py}`;\r\n    return (\r\n      <path fill=\"none\" strokeWidth=\"1px\" stroke={progressColor} d={prog} />\r\n    );\r\n  }\r\n}\r\n"]}